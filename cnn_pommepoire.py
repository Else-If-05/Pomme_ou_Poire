# -*- coding: utf-8 -*-
"""CNN_PommePoire.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IDEQKkBGgL3nWH5dS5FPHjDB3rOWAMlX
"""

import cv2
import numpy as np
import requests
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import sys
import datetime
from tensorflow import keras
from tensorflow.keras.models import Model
import tensorflow as tf

"""POUR SUPPRIMER (CLEAR) LES FICHIERS PRESENTS DANS L'ENVIRONNEMENT COLAB"""

import os
import glob

# Liste tous les fichiers dans /content (pas les sous-dossiers)
files = glob.glob('/content/*')

for f in files:
    try:
        if os.path.isfile(f):
            os.remove(f)  # Supprime le fichier
        elif os.path.isdir(f):
            # Si c'est un dossier, on le supprime aussi (optionnel)
            import shutil
            shutil.rmtree(f)
    except Exception as e:
        print(f"Erreur en supprimant {f} : {e}")

print("Tous les fichiers et dossiers dans /content ont été supprimés.")

# Import dataset
import pathlib
import os
import zipfile
import tensorflow as tf

# Télécharger les datasets
pear_data_dir = tf.keras.utils.get_file(
    "pear.zip",
    "https://github.com/Else-If-05/Pomme_ou_Poire/raw/main/datasets/pear.zip",
    extract=False
)

apple_data_dir = tf.keras.utils.get_file(
    "apple.zip",
    "https://github.com/Else-If-05/Pomme_ou_Poire/raw/main/datasets/apple.zip",
    extract=False
)

# Créer le dossier datasets s'il n'existe pas
os.makedirs('/content/datasets', exist_ok=True)

# Dézipper les datasets dans le dossier /content/datasets
with zipfile.ZipFile(pear_data_dir, 'r') as zip_ref:
    zip_ref.extractall('/content/datasets')
with zipfile.ZipFile(apple_data_dir, 'r') as zip_ref:
    zip_ref.extractall('/content/datasets')

# Pointer vers le bon répertoire (à ajuster si le zip crée des sous-dossiers)
data_dir = pathlib.Path('/content/datasets')
print(data_dir)
print(os.path.abspath(data_dir))

"""POUR SUPPRIMER 500 IMAGES DU DOSSIER DES POIRES"""

import os
import random
from pathlib import Path

# Chemin du dossier contenant les poires
dossier_poires = Path("/content/datasets/apple/Apple Red 3")

# Vérification que le dossier existe
if not dossier_poires.exists():
    raise FileNotFoundError(f"Le dossier {dossier_poires} n'existe pas")

# Lister tous les fichiers image (ajuster les extensions si nécessaire)
extensions = ('.jpg', '.jpeg', '.png', '.webp')
fichiers = [f for f in dossier_poires.iterdir() if f.suffix.lower() in extensions]

print(f"Nombre initial d'images : {len(fichiers)}")

# Vérifier qu'il y a assez d'images à supprimer
if len(fichiers) <= 340:
    raise ValueError(f"Il n'y a que {len(fichiers)} images. Impossible d'en supprimer 340")

# Sélection aléatoire de 340 fichiers à supprimer
fichiers_a_supprimer = random.sample(fichiers, 340)

# Journal des suppressions
log_file = dossier_poires.parent / "deletion_log.txt"
with open(log_file, "w") as f:
    f.write("Fichiers supprimés:\n")
    for fichier in fichiers_a_supprimer:
        f.write(f"{fichier.name}\n")

# Suppression effective
for fichier in fichiers_a_supprimer:
    os.remove(fichier)

print(f"500 images ont été supprimées. Journal des suppressions sauvegardé dans {log_file}")
print(f"Nombre restant d'images : {len(fichiers) - 340}")

import pathlib

data_dir = pathlib.Path('/content/datasets')
image_extensions = ['*.jpg', '*.jpeg', '*.png']

# Compter le nombre total d'images
image_count = 0
for ext in image_extensions:
    image_count += len(list(data_dir.rglob(ext)))

print(f"Nombre total d'images : {image_count}")

# Compter les images de poires
pear_data_dir = pathlib.Path('/content/datasets/pear')
pear_image_count = 0
for ext in image_extensions:
    pear_image_count += len(list(pear_data_dir.rglob(ext)))

print(f"Nombre total d'images de poires : {pear_image_count}")

# Compter les images de pommes
apple_data_dir = pathlib.Path('/content/datasets/apple')
apple_image_count = 0
for ext in image_extensions:
    apple_image_count += len(list(apple_data_dir.rglob(ext)))

print(f"Nombre total d'images de pommes : {apple_image_count}")

batch_size = 3
img_height = 200
img_width = 200

train_data = tf.keras.preprocessing.image_dataset_from_directory(
  data_dir,
  validation_split=0.2,
  subset="training",
  seed=42,
  image_size=(img_height, img_width),
  batch_size=batch_size,
  )

val_data = tf.keras.preprocessing.image_dataset_from_directory(
  data_dir,
  validation_split=0.5,
  subset="validation",
  seed=42,
  image_size=(img_height, img_width),
  batch_size=batch_size)

class_names = val_data.class_names
print(class_names)

import matplotlib.pyplot as plt

plt.figure(figsize=(10, 10))
for images, labels in train_data.take(1):
  for i in range(3):
    ax = plt.subplot(1, 3, i + 1)
    plt.imshow(images[i].numpy().astype("uint8"))
    plt.title(class_names[labels[i]])
    plt.axis("off")

from tensorflow.keras import layers

num_classes = 2

model = tf.keras.Sequential([
    layers.Rescaling(1./255),
    layers.Conv2D(128,4, activation='relu'),
    layers.MaxPooling2D(),
    layers.Conv2D(64,4, activation='relu'),
    layers.MaxPooling2D(),
    layers.Conv2D(32,4, activation='relu'),
    layers.MaxPooling2D(),
    layers.Conv2D(16,4, activation='relu'),
    layers.MaxPooling2D(),
    layers.Flatten(),
    layers.Dense(64,activation='relu'),
    layers.Dense(num_classes, activation='softmax')
])

model.compile(optimizer='adam',
              loss=tf.losses.SparseCategoricalCrossentropy(from_logits=True),
  metrics=['accuracy'],)

logdir="logs"

tensorboard_callback = keras.callbacks.TensorBoard(
    log_dir=logdir,
    histogram_freq=1,
    write_images=True
)


model.fit(
    train_data,
  validation_data=val_data,
  epochs=10,
  callbacks=[tensorboard_callback]
)

model.summary()

from google.colab import files
file_to_predict = files.upload()
for file_ in file_to_predict:
    image_to_predict = cv2.imread(file_,cv2.IMREAD_COLOR)
    plt.imshow(cv2.cvtColor(image_to_predict, cv2.COLOR_BGR2RGB))
    plt.show()
    img_to_predict = np.expand_dims(cv2.resize(image_to_predict,(200,200)), axis=0)
    # Prédiction
    res = np.argmax(model.predict(img_to_predict), axis=-1)
    print("Prediction class:", res)
    print("Prediction probabilities (Pear, Apple):", model.predict(img_to_predict))
    if res == 1:
        plt.show()
        print("IT'S AN APPLE !")
    elif res == 0 :
        plt.show()
        print("IT'S A PEAR !")